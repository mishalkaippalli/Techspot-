<%- include("../partials/adminHeader") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">

</head>

 <style>
    .error-message{
        color: red;
        margin-top: 5px;
        font-size: 14 px;
    }
 </style>

 <section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add new Product</h2>
            </div>
        </div>
    </div>
    <div class="col-lg-9">
        <div class="card mb-4">
            <div class="card-body">

                <form method="post" action="/admin/addProducts" enctype="multipart/form-data" >

                   <div class="mb-4">
                      <label for="product_name" class="form-label">Product Name</label>
                      <input type="text" placeholder="Type here" name="productName"
                           class="form-control border" id="product-name">
                      <div id="productName-error" class="error-message"></div>
                   </div>
              
                   <div class="col-lg-4 mb-4">
                     <label class="form-label">Brand</label>
                     <select class="form-select border" name="brand">
                        <% for (let i=0; i < brand.length; i++) { %>
                           <option value="<%=brand[i].brandName %>">
                              <%= brand[i].brandName %>
                           </option>
                        <% } %>
                     </select>
                   </div>
                    
                   <div class="mb-4">
                        <label class="form-label">Full Description</label>
                        <textarea placeholder="Type here" name="description" class="form-control border"
                         rows="4"></textarea>
                         <div id="description" class="error-message"></div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Regular price</label>
                                <input placeholder="$" name="regularPrice" type="text"
                                  class="form-control border">
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Quantity</label>
                                <input placeholder="" name="quantity" type="text"
                                  class="form-control border">
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">RAM</label>
                                <input placeholder=""id="ram" name="ram" type="text"
                                  class="form-control border">
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Storage</label>
                                <input placeholder="" id="storage" name="storage" type="text"
                                  class="form-control border">
                            </div>
                        </div>
                        <div class="col-lg-4">
                           <div class="mb-4">
                              <label class="form-label">Color</label>
                                <input placeholder="" id="color" name="color" type="text"
                                class="form-control border">
                            </div>
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="row gx-2"><!-- gutter-x for horizontal spacing in a grid layout-->
                               <div class="col-sm-6 mb-3">
                                 <label class="form-label">Category</label>
                                 <select class="form-select border" style="width: 150px;" name="category">
                                    <% for (let i=0; i < cat.length; i++) { %>
                                       <option value="<%= cat[i].name %>">
                                         <%= cat[i].name %>
                                       </option>
                                    <% } %>
                                 </select>
                               </div>
                            </div>

                        </div>
                    </div>

                    <div class="card mb-2">
                        <div class="card-header">
                            <h4>Choose Images</h4>
                        </div>
                        <div class="row">
                            <div class="card-body align-items-center" style="margin-bottom: 20px">
                            <img src="/admin-assets/imgs/theme/upload.svg" alt="upload" id="imgView1">
                            <input class="form-control" type="file" name="images" id="input1"
                                accept="image/png, image/jpeg, image/jpg"
                                onchange="viewImage1(event), viewImage(event, 1)"> <!--the onchange attribute specifies a JavaScript function to be executed when the value of the input field changes -->
                            </div>
                            <div class="image-cropper d-flex align-items-center"
                               style="display: none; width: 300px; height: 200px; margin-bottom: 20px;">
                               <img src="" id="croppedImg1" alt="">
                                <button type="button" id="saveButton1" class="btn-am btn-primary">Save</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card-body align-items-center" style="margin-bottom: 20px">
                            <img src="/admin-assets/imgs/theme/upload.svg" alt="upload" id="imgView1">
                            <input class="form-control" type="file" name="images" id="input1"
                                accept="image/png, image/jpeg, image/jpg">
                            </div>
                        </div>
                        <div class="row">
                            <div class="card-body align-items-center" style="margin-bottom: 20px">
                            <img src="/admin-assets/imgs/theme/upload.svg" alt="upload" id="imgView1">
                            <input class="form-control" type="file" name="images" id="input1"
                                accept="image/png, image/jpeg, image/jpg">
                            </div>
                        </div>
                    </div>
                    <!-- <input type="hidden" id="croppedImageData" name="croppedImageData"> -->
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit">
                        Add product
                        </button>
                    </div>

                </form>

            </div>
        </div>
    </div>
 </section>


<%- include("../partials/adminFooter") %>         

<script>
    function viewImage1(event) {
      var imgView1 = document.getElementById('imgView1');
      // Set the src attribute of the image to the URL of the selected file
      imgView1.src = URL.createObjectURL(event.target.files[0]);
    }
     
    
    function viewImage(event, index) {
            let input = event.target;
            let reader = new FileReader();

            reader.onload = function () {
                let dataURL = reader.result;
                let image = document.getElementById('imgView' + index);
                image.src = dataURL;

                // Initialize Cropper.js on the image
                let cropper = new Cropper(image, {
                    aspectRatio: 1, // Square aspect ratio
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true
                });


                // Show the image cropper container
                let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                cropperContainer.style.display = 'block';

                // Update the cropped image when the "Save" button is clicked
                let saveButton = document.querySelector('#saveButton' + index)
                saveButton.addEventListener('click', async function () {
                    let croppedCanvas = cropper.getCroppedCanvas();
                    console.log(croppedCanvas)
                    let croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                    // document.getElementById('croppedImageData').value = croppedImage.src; //added

                    // Generate a unique name for the cropped image file based on the current timestamp
                    let timestamp = new Date().getTime();
                    let fileName = `cropped-img-${timestamp}-${index}.png`;

                    await croppedCanvas.toBlob(blob => {
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob], fileName, blob)
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files
                        console.log("input.files", input.files)
                    });
                    // cropperContainer.style.display = 'none';
                });
            };
            reader.readAsDataURL(input.files[0]);
        }


        // Array to store selected images
        const selectedImages = [];

        // Function to handle file input change
        document.getElementById("imageInput").addEventListener("change", handleFileSelect);

        function handleFileSelect(event) {
            // Target the container for displaying thumbnails
            const addedImagesContainer = document.getElementById("addedImagesContainer");

            // Clear previous content
            addedImagesContainer.innerHTML = "";

            const files = event.target.files;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];

                // Add the file to the selected images array
                selectedImages.push(file);

                // Create thumbnail element
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");

                // Create image element
                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";

                // Set a fixed width for the image
                img.style.width = "50px"; // Adjust the width as needed
                img.style.height = "auto";

                // Create remove icon
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times;"; // Multiplication symbol as a cross

                // Event listener to remove the image on icon click
                removeIcon.addEventListener("click", function () {
                    // Remove the file from the selected images array
                    const index = selectedImages.indexOf(file);
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                    }

                    // Remove the thumbnail from the container
                    thumbnail.remove();
                });

                // Append elements to thumbnail
                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);

                // Append thumbnail to the container
                addedImagesContainer.appendChild(thumbnail);
            }
        }

</script>