<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PayPal JS SDK Standard Integration</title>
    <script src="https://www.paypal.com/sdk/js
    ?client-id=<%= paypalClientId %>"></script>    <!-- Replaced the "test" client-id value with your client-id -->
    <script src="https://www.paypal.com/sdk/js?client-id=<%= paypalClientId %>&currency=EUR"></script>
    <!-- <script src="/script.js" defer></script> -->
  </head>
  <body>
    <div id="paypal-button-container"></div>
    <p id="result-message"></p>
    
  </body>
  
</html>

<script>
  
window.paypal.Buttons({
    async createOrder() {
      try {
        // const orderId = " orderedId %>";

        const response = await fetch("/api/orders", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // use the "body" param to optionally pass additional order information
          // like product ids and quantities

        //   cart: [{id: order.order.product.map((id) => _id)}, 
        //     {quantity:  order.order.product.map((quantity) => quantity) }]

         body: JSON.stringify({  
            cart: [   
              {
                id: 1,
                quantity: 2,
              },
              {
                id: 2, 
                quantity: 3,
              }
            ],
          }),
        });
        
        const orderData = await response.json();
          
        if (orderData.id) {
          return orderData.id;
        } else {
          const errorDetail = orderData?.details?.[0];
          const errorMessage = errorDetail
            ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`
            : JSON.stringify(orderData);
        
          throw new Error(errorMessage);
        }
      } catch (error) {
        console.error(error);
        resultMessage(`Could not initiate PayPal Checkout...<br><br>${error}`);
      }
    },
    async onApprove(data, actions) {
      try {
        const response = await fetch(`/api/orders/${data.orderID}/capture`, {
          method: "POST", headers: {
            "Content-Type": "application/json",
          },
        });
      const orderData = await response.json();
      // Three cases to handle:
      //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
      //   (2) Other non-recoverable errors -> Show a failure message
      //   (3) Successful transaction -> Show confirmation or thank you message
      const errorDetail = orderData?.details?.[0];
      if(errorDetail?.issue === "INSTRUMENT_DECLINED") {
        // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
        // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/
        return actions.restart();
      } else if(errorDetail) {
        // (2) Other non-recoverable errors -> Show a failure message
        throw new Error(`${errorDetail.description} (${orderData.debug_id})`);
      } else if(!orderData.purchase_units) {
        throw new Error(JSON.stringify(orderData));
      } else {
        // (3) Successful transaction -> Show confirmation or thank you message
        // Or go to another URL:  actions.redirect('thank_you.html');
        const transaction = orderData?.purchase_units?.[0]?.payments?.captures?.[0] || orderData?.purchase_units?.[0]?.payments?.authorizations?.[0];
        resultMessage(`Transaction ${transaction.status}: ${transaction.id}<br><br>See console for all available details`, );
        console.log("Capture result", orderData, JSON.stringify(orderData, null, 2), );
        window.location.href = '/shop'
      }
      } catch (error) {
      console.error(error);
      resultMessage(`Sorry, your transaction could not be processed...<br><br>${error}`, );
      }
      },
      }).render("#paypal-button-container");
    </script>